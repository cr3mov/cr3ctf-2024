from z3 import *


s = Solver()
flag = [BitVec(f'flag[{i}]', 64) for i in range(100)]

for i in range(len(flag)):
    # s.add(flag[i] & 0xFF == flag[i])
    s.add(flag[i] >= 33, flag[i] <= 126)

s.add(flag[15] ^ 0x10 == 0x4f)
s.add(flag[72] - 0x10 == 0x5b)
s.add(flag[65] ^ 0x7f == 0x17)
s.add(flag[38] ^ 0x10 == 0x23)
s.add(flag[91] + 0x10 == 0x85)
s.add(flag[21] + 0x10 == 0x78)
s.add(flag[35] ^ 0x10 == 0x78)
s.add(flag[5] ^ 0x10 == 0x78)
s.add(flag[4] ^ 0x10 == 0x20)
s.add(flag[75] - 0x10 == 0x57)
s.add(flag[55] - 0x4a == 0x1b)
s.add(flag[68] - 0x10 == 0x60)
s.add(flag[98] - 0x10 == 0x66)
s.add(flag[70] + 0x10 == 0x82)
s.add(flag[8] + 0x10 == 0x87)
s.add(flag[92] + 0x10 == 0x77)
s.add(flag[0] - 0x10 == 0x53)
s.add(flag[69] ^ 0xe8 == 0x8e)
s.add(flag[71] - 0x10 == 0x54)
s.add(flag[67] - 0xa3 == 0xffffffffffffffca)
s.add(flag[96] ^ 0x10 == 0x74)
s.add(flag[88] ^ 0x2b == 0x18)
s.add(flag[41] ^ 0x10 == 0x20)
s.add(flag[14] - 0x10 == 0x45)
s.add(flag[18] - 0x10 == 0x55)
s.add(flag[20] - 0x10 == 0x44)
s.add(flag[84] - 0x10 == 0x55)
s.add(flag[40] - 0xfd == 0xffffffffffffff7c)
s.add(flag[24] - 0x10 == 0x62)
s.add(flag[77] ^ 0x15 == 0x66)
s.add(flag[63] - 0x10 == 0x4f)
s.add(flag[50] - 0x10 == 0x4f)
s.add(flag[17] ^ 0x10 == 0x62)
s.add(flag[52] - 0x10 == 0x53)
s.add(flag[19] ^ 0xfa == 0xa5)
s.add(flag[86] ^ 0x10 == 0x26)
s.add(flag[73] - 0x4f == 0x17)
s.add(flag[42] - 0x10 == 0x65)
s.add(flag[93] - 0x1c == 0x51)
s.add(flag[23] + 0xa6 == 0x105)
s.add(flag[16] + 0x10 == 0x44)
s.add(flag[3] - 0xd6 == 0xffffffffffffffa5)
s.add(flag[39] - 0x10 == 0x4f)
s.add(flag[87] ^ 0x3d == 0x4e)
s.add(flag[12] - 0x10 == 0x49)
s.add(flag[31] - 0x47 == 0xffffffffffffffed)
s.add(flag[60] - 0x10 == 0x11)
s.add(flag[97] + 0x10 == 0x75)
s.add(flag[64] + 0x10 == 0x78)
s.add(flag[83] - 0x10 == 0x69)
s.add(flag[45] + 0x10 == 0x75)
s.add(flag[80] - 0x10 == 0x53)
s.add(flag[99] + 0x10 == 0x8d)
s.add(flag[26] + 0x10 == 0x71)
s.add(flag[95] + 0x10 == 0x7d)
s.add(flag[13] - 0x10 == 0x5f)
s.add(flag[10] - 0x8 == 0x6f)
s.add(flag[46] + 0xb0 == 0x122)
s.add(flag[57] + 0x49 == 0x6a)
s.add(flag[94] + 0x10 == 0x47)
s.add(flag[90] ^ 0x10 == 0x79)
s.add(flag[76] - 0xe9 == 0xffffffffffffff8b)
s.add(flag[79] ^ 0x10 == 0x79)
s.add(flag[89] - 0x10 == 0x5a)
s.add(flag[33] + 0x10 == 0x31)
s.add(flag[56] - 0x10 == 0x54)
s.add(flag[81] ^ 0x10 == 0x6a)
s.add(flag[36] + 0x10 == 0x40)
s.add(flag[74] - 0x6c == 0xfffffffffffffff9)
s.add(flag[29] ^ 0x10 == 0x74)
s.add(flag[61] + 0x59 == 0x7a)
s.add(flag[27] + 0x10 == 0x7c)
s.add(flag[54] + 0x11 == 0x83)
s.add(flag[47] ^ 0x10 == 0x75)
s.add(flag[37] ^ 0x8f == 0xff)
s.add(flag[1] ^ 0x10 == 0x62)
s.add(flag[43] - 0x10 == 0x4f)
s.add(flag[2] ^ 0x10 == 0x23)
s.add(flag[51] + 0x10 == 0x83)
s.add(flag[32] - 0x10 == 0x3c)
s.add(flag[48] - 0x10 == 0x5e)
s.add(flag[59] + 0xf8 == 0x119)
s.add(flag[9] + 0x10 == 0x87)
s.add(flag[28] ^ 0x10 == 0x4f)
s.add(flag[85] - 0x10 == 0x67)
s.add(flag[78] - 0x10 == 0x5e)
s.add(flag[66] ^ 0x12 == 0x7f)
s.add(flag[30] + 0xec == 0x11f)
s.add(flag[34] ^ 0x6d == 0x24)
s.add(flag[53] - 0xb9 == 0xffffffffffffff7b)
s.add(flag[6] + 0xed == 0x164)
s.add(flag[7] ^ 0x10 == 0x20)
s.add(flag[62] + 0x10 == 0x31)
s.add(flag[25] + 0x10 == 0x75)
s.add(flag[22] - 0xee == 0xffffffffffffff45)
s.add(flag[11] - 0x10 == 0x4f)
s.add(flag[49] ^ 0xb7 == 0xc3)
s.add(flag[82] + 0x4 == 0x6e)
s.add(flag[58] - 0xea == 0xffffffffffffff37)
s.add(flag[44] ^ 0x10 == 0x67)

if s.check() != sat:
    exit(print('unsat'))

m = s.model()
out_flag = ''
for i in range(len(flag)):
    out_flag += chr(m[flag[i]].as_long())
print(out_flag)
